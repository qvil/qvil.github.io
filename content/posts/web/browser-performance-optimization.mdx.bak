---
title: "[Web] 웹 성능 최적화"
date: 2021-03-01
tags: [Web, Performance]
slug: web/browser-performance-optimization
banner: ./web-performance-optimization-featured.png
---

웹 성능 최적화라는 주제는 범위가 매우 방대하다. 그 중 프론트엔드 개발자 관점에서 실무 경험, 동료들과 나눈 대화, 최근 읽은 책을 정리한 내용이다.

## 웹 성능이란?

> 웹 성능은 웹사이트의 기능이나 내용을 의미하는 것이 아니라, 콘텐츠가 신속하게 전달되어 사용자가 원하는 서비스를 빠르게 전달받을 수 있도록 하는 시스템들의 성능을 의미합니다. - 웹에 날개를 달아주는 웹 성능 최적화 기법

## 왜 필요한가?

월마트닷컴은 평균 로딩 시간을 1초 줄이면 구매율이 약 2% 증가한다고 밝혔다. 엔지니어의 관점 뿐만 아니라 사용자 입장에서 경험을 개선시켜주기 때문에 필요하다. 또한 돈으로 살 수 없는 기업의 이미지에도 영향을 끼친다. 구글에 따르면 페이지가 3초 안에 로딩되지 않으면 53%의 사용자가 이탈한다고 하지만 성격급한 한국인에게는 이보다 더 빠른 로딩이 요구된다.

## 어떻게 측정하는가?

여러가지 방법이 있지만 크롬 개발자도구 [Lighthouse](https://developers.google.com/web/tools/lighthouse)로 간편하게 측정해보길 추천한다.

![lighthouse](./lighthouse.png)

카테고리별, 장치별(Mobile, Desktop)로 볼 수 있다.

![lighthouse-result](./lighthouse-result.png)

예를 들어 위와 같이 Image element에 alt 속성이 빠진 경우 SEO 점수가 떨어진다. Lighthouse는 점수 측정 뿐만 아니라 개선 방법을 설명과 함께 제시해주니 매우 유용하다.

## 웹 성능을 만드는 지표

웹 성능을에 영향을 주는 요소는 다양하지만 크게 3가지로 나눠보면 아래와 같다. 이 글에서는 1번 사용자 환경(프론트엔드)에 대해서 중점적으로 다룬다.

1. 사용자 환경(프론트엔드) - HTML, CSS, JS 등
2. 공급자 환경(백엔드) - CDN, DNS, DB 등
3. 전달 환경(인프라) - 인터넷 속도 등

## 사용자 환경(프론트엔드)에서의 웹 성능 최적화

1. HTTP 요청 수 줄이기: HTTP2를 사용하여 병렬로 처리하거나 HTTP 1은 순차적으로 요청되기 때문에 설계할 때 API 요청을 최소화한다. (예: 페이지에서 10번의 API 호출하는 방식보다는 하나의 API로 통합해서 호출)
2. 용량 줄이기: Code spliting, Bundler(Webpack)를 이용한 Minify, CSS Sprite, 압축(gzip), 이미지(CDN(CDN을 이용하면 query string으로 디바이스 사이즈에 맞는 이미지를 부를 수 있다. ?w=320), WebP), 캐시(인라인 이미지(Base64) 사용X, [폰트](https://blog.qvil.dev/nextjs/redirects))

## 브라우저 최적화

### 브라우저 아키텍처

크게 7개의 컴포넌트로 구성된다.

![browser-7components](./browser-7components.png)

#### 1. 유저 인터페이스

- 사용자가 브라우저를 통해 상호 작용할 수 있도록 함.
- 브라우저들은 주소 입력창, 북마크, 앞뒤 버튼 등 동일하게 제공하는 필수 기능들을 가지고 있다.
- 브라우저별 차별화된 기능 제공.

#### 2. 브라우저 엔진

유저 인터페이스와 렌더링 엔진 사이에서 렌더링 상태 조회, 렌더링 작업 제어하기 위한 인터페이스 제공.

#### 3. 렌더링 엔진

- HTML 분석, CSS 분석. 실제 웹 콘텐츠를 브라우저 창에 그리는 역할.
- Webkit(Safari), Gecko(Firefox), Blink(Chrome), Trident(IE) 등

#### 4. 네트워킹

- DNS 조회, TCP 연결 등 HTTP 요청 & 응답 받는 역할
- 브라우저별 6~10개 스레드로 동시에 TCP 연결 생성해 리소스 빠르게 다운 가능

#### 5. UI 백엔드

콤보박스, 드롭박스 등 기본 UI 컴포넌트 제공

#### 6. 자바스크립트 해석기

V8, Spider Monkey 등의 엔진을 사용하여 자바스크립트 분석, 해석

#### 7. 데이터 저장소

- 데이터 지속성(Persistence)을 유지하기 위한 컴포넌트.
- Cookie, HTML 5 로컬스토리지, Indexed DB 등

### 중요 렌더링 경로

아래 그림은 브라우저 Critical rendering path를 나타낸다. 적절한 그림이라고 생각해서 책에서 발췌했다.

![critical-rendering-path](./critical-rendering-path.jpg)

1. HTML 분석, DOM 트리 생성
2. CSS 분석, CSSOM 트리 생성
3. 위 트리 모델을 결합해 렌더 트리를 생성

#### 1. DOM 트리 생성

- HTML의 구문을 분석해 태그를 해석하여 DOM(Document Object Model)이라는 객체 모델(프로그래밍 인터페이스)로 변환.
- DOM은 객체 속성, 메소드, 이벤트 등을 정의.
- 브라우저 구문 분석기는 위에서부터 순차적으로 HTML 분석하여 부모, 자식 노드 관계를 파악해 DOM 트리 생성

![dom-tree](./dom-tree.png)

#### 2. CSSOM 트리 생성

- CSSOM(CSS Object Model)은 DOM과 비슷하게 CSS를 처리하기 위한 트리 구조의 프로그래밍 인터페이스
- 브라우저가 HTML 구문 분석하며 CSS 참조하는 링크를 만나면 해당 CSS 리소스 다운로드하고 구문 분석기가 CSS를 분석
- HTML 구문 분석과 CSS 분석은 서로 다른 방식, 다른 스레드로 동작해서 서로 방해하지 않는다.

#### 3. 렌더 트리 생성

DOM 트리, CSSOM 트리 구문 분석 완료되면 브라우저는 두 개의 트리를 병합해 렌더 트리를 생성

### 브라우저 렌더링 최적화

---

Next.js에서 실제로 가능한것들.

캐시 헤더로 컨트롤

이미지 - 브라우저별 이미지 최적화 CDN ?w=300

브라우저 아키텍처

중요 렌더링 경로

## 참고

- [웹에 날개를 달아주는 웹 성능 최적화 기법 - 강상진, 윤호성, 박정현 저 | 루비페이퍼](http://www.yes24.com/Product/Goods/96262886)
- https://d2.naver.com/helloworld/59361
- https://developers.google.com/web/fundamentals/performance/critical-rendering-path
