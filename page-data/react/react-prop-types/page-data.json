{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/react/react-prop-types","result":{"data":{"post":{"__typename":"MdxPost","slug":"/react/react-prop-types","title":"[한국어,EN] React Type Check with prop-types","date":"2018.04.20","tags":[{"name":"react","slug":"react"},{"name":"prop-types","slug":"prop-types"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"[한국어,EN] React Type Check with prop-types\",\n  \"date\": \"2018-04-20 23:29:46 +0900\",\n  \"categories\": \"react\",\n  \"tags\": [\"react\", \"prop-types\"],\n  \"comments\": true,\n  \"share\": true,\n  \"slug\": \"react/react-prop-types\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"1. React Type Check with prop-types\"), mdx(\"p\", null, \"React Component \\uB97C \\uB9CC\\uB4E4\\uB2E4\\uAC00 type \\uC744 \\uCCB4\\uD06C\\uD574\\uC57C \\uD560 \\uD544\\uC694\\uC131\\uC744 \\uB290\\uAF08\\uB2E4.(I felt that check the type of react component)\"), mdx(\"h1\", null, \"2. \\uC608\\uC81C(Example)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<WrappedComponent title=\\\"title\\\" subheader=\\\"subheader\\\" avatar={<Face />}>\\n  {\\\"Hello World\\\"}\\n</WrappedComponent>\\n\")), mdx(\"p\", null, \"\\uCEE4\\uC2A4\\uD140 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uB97C \\uB9CC\\uB4DC\\uB294\\uB370 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"avatar\"), \" prop \\uC5D0\\uB294 \\uAF2D component \\uB97C \\uBC1B\\uC544\\uC57C\\uD558\\uACE0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" props \\uC5D0\\uB294 \\uC544\\uBB34\\uAC70\\uB098 \\uBC1B\\uC544\\uB3C4 \\uC0C1\\uAD00\\uC5C6\\uB294 \\uD0C0\\uC785\\uCCB4\\uD06C\\uB97C \\uD558\\uACE0 \\uC2F6\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"(To create a custom component, I need to get a component type in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"avatar\"), \" prop and to get anything in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" prop)\"), mdx(\"h1\", null, \"3. \\uCF54\\uB4DC(Code)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import PropTypes from \\\"prop-types\\\";\\n\\nWrappedComponent.propTypes = {\\n  children: PropTypes.node,\\n  avatar: PropTypes.element,\\n  title: PropTypes.string,\\n  subheader: PropTypes.string,\\n};\\n\")), mdx(\"h1\", null, \"4. \\uCC38\\uACE0(Reference)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/typechecking-with-proptypes.html\"\n  }), \"https://reactjs.org/docs/typechecking-with-proptypes.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/prop-types\"\n  }), \"https://www.npmjs.com/package/prop-types\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"1. React Type Check with prop-types React Component 를 만들다가 type 을 체크해야 할 필요성을 느꼈다.(I felt that check the type of react component)…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/react/react-prop-types","formatString":"YYYY.MM.DD"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}