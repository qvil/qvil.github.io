{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/typescript/mapped-types","result":{"data":{"post":{"__typename":"MdxPost","slug":"/typescript/mapped-types","title":"[Typescript] Mapped Types","date":"2021.01.21","tags":[{"name":"Typescript","slug":"typescript"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"[Typescript] Mapped Types\",\n  \"date\": \"2021-01-21T00:00:00.000Z\",\n  \"tags\": [\"Typescript\"],\n  \"slug\": \"typescript/mapped-types\",\n  \"banner\": \"/images/ts-banner.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Type\\uD615\\uC2DD\\uC740 \\uAC19\\uC740\\uB370 \\uBAA8\\uB450 optional \\uD639\\uC740 readonly\\uB85C property type\\uC744 \\uBC14\\uAFB8\\uACE0 \\uC2F6\\uC740 \\uACBD\\uC6B0 \\uD568\\uC218\\uCC98\\uB7FC \\uC0AC\\uC6A9\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type Readonly<T> = { readonly [P in keyof T]: T[P] };\\ntype Partial<T> = { [P in keyof T]?: T[P] };\\n\")), mdx(\"h2\", null, \"\\uC608\"), mdx(\"p\", null, \"name\\uACFC age\\uAC00 \\uD544\\uC218\\uC778 UserType\\uC744 PUT\\uC774\\uB098 PATCH \\uB4F1 Optional property\\uB97C \\uAC00\\uC9C4 DTO\\uB85C \\uB9CC\\uB4DC\\uB824\\uBA74\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"interface UserType {\\n  name: string;\\n  age: number;\\n}\\n\\ninterface CreateUserType extends Partial<UserType> {}\\n\")), mdx(\"h2\", null, \"\\uCC38\\uACE0\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\"\n  }), \"https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Type형식은 같은데 모두 optional 혹은 readonly로 property type을 바꾸고 싶은 경우 함수처럼 사용 예 name과 age가 필수인 UserType을 PUT이나 PATCH 등 Optional property를 가진 DTO…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/typescript/mapped-types","formatString":"YYYY.MM.DD"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}