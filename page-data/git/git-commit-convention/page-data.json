{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/git/git-commit-convention","result":{"data":{"post":{"__typename":"MdxPost","slug":"/git/git-commit-convention","title":"[Git] Commit Convention 좋은 커밋 메세지 작성법","date":"2017.06.16","tags":[{"name":"git","slug":"git"},{"name":"convention","slug":"convention"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"[Git] Commit Convention 좋은 커밋 메세지 작성법\",\n  \"date\": \"2017-06-16T00:00:00.000Z\",\n  \"tags\": [\"git\", \"convention\"],\n  \"comments\": true,\n  \"share\": true,\n  \"slug\": \"git/git-commit-convention\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Table of Contents\\n{:toc}\")), mdx(\"p\", null, \"\\uC544\\uB798 \\uCC38\\uACE0\\uC0AC\\uC774\\uD2B8\\uB97C \\uC694\\uC57D\\uD558\\uC600\\uC74C.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD55C\\uAE00 \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://meetup.toast.com/posts/106\"\n  }), \"\\uC88B\\uC740 git \\uCEE4\\uBC0B \\uBA54\\uC2DC\\uC9C0\\uB97C \\uC791\\uC131\\uD558\\uAE30 \\uC704\\uD55C 7\\uAC00\\uC9C0 \\uC57D\\uC18D\"), \" - \\uB124\\uC774\\uBC84 \\uD1A0\\uC2A4\\uD2B8 \\uBC0B\\uC5C5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC601\\uBB38 \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://chris.beams.io/posts/git-commit/\"\n  }), \"How to Write a Git Commit Message\"))), mdx(\"h2\", null, \"1. \\uC81C\\uBAA9\\uACFC \\uBCF8\\uBB38\\uC744 \\uD55C \\uC904 \\uB744\\uC6CC \\uBD84\\uB9AC\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"50\\uC790 \\uC774\\uB0B4\\uC758 \\uC694\\uC57D \\uBB38\\uC7A5\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uBE48 \\uC904 \\uD558\\uB098\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC124\\uBA85\\uBB38\")), mdx(\"p\", null, \"\\uC704 \\uAC00\\uC774\\uB4DC\\uB97C \\uB530\\uB974\\uBA74 \\uC544\\uB798 \\uBA85\\uB839\\uC5B4\\uB97C \\uC774\\uC6A9\\uD560 \\uB54C \\uBCF4\\uAE30 \\uD3B8\\uB9AC\\uD568. + git\\uC5D0\\uC11C \\uCD94\\uCC9C\\uD568\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"git log --oneline\\ngit shortlog\\n\")), mdx(\"h2\", null, \"2. \\uC81C\\uBAA9\\uC740 \\uC601\\uBB38 \\uAE30\\uC900 50\\uC790 \\uC774\\uB0B4\"), mdx(\"h2\", null, \"3. \\uC81C\\uBAA9 \\uCCAB\\uAE00\\uC790 \\uB300\\uBB38\\uC790\"), mdx(\"h2\", null, \"4. \\uC81C\\uBAA9 \\uB05D\\uC5D0 \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \".\"), \" \\uAE08\\uC9C0\"), mdx(\"h2\", null, \"5. \\uC81C\\uBAA9\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"\\uBA85\\uB839\\uC870\")), mdx(\"p\", null, \"git Built-in Convention\\uC744 \\uB530\\uB978\\uB2E4.\"), mdx(\"h3\", null, \"\\uC608\\uBB38\"), mdx(\"p\", null, \"Good\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"(If applied, this commit will) Refactor subsystem X for readability\\n\")), mdx(\"p\", null, \"Bad\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"(If applied, this commit will) Fixed bug with Y\\n\")), mdx(\"h2\", null, \"6. \\uBCF8\\uBB38\\uC740 \\uC601\\uBB38 \\uAE30\\uC900 72\\uC790\\uB9C8\\uB2E4 \\uC904 \\uBC14\\uAFC8\"), mdx(\"h2\", null, \"7. \\uBCF8\\uBB38\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"\\uC5B4\\uB5BB\\uAC8C\"), \"\\uBCF4\\uB2E4 \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"\\uBB34\\uC5C7\\uC744\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"\\uC65C\"), \"\\uC5D0 \\uB9DE\\uCDB0 \\uC791\\uC131\"), mdx(\"p\", null, \"\\uC88B\\uC740 \\uC608\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"commit eb0b56b19017ab5c16c745e6da39c53126924ed6\\nAuthor: Pieter Wuille \\\\<pieter.wuille@gmail.com\\\\>\\nDate:   Fri Aug 1 22:57:55 2014 +0200\\n\\n   Simplify serialize.h's exception handling\\n\\n   Remove the 'state' and 'exceptmask' from serialize.h's stream\\n   implementations, as well as related methods.\\n\\n   As exceptmask always included 'failbit', and setstate was always\\n   called with bits = failbit, all it did was immediately raise an\\n   exception. Get rid of those variables, and replace the setstate\\n   with direct exception throwing (which also removes some dead\\n   code).\\n\\n   As a result, good() is never reached after a failure (there are\\n   only 2 calls, one of which is in tests), and can just be replaced\\n   by !eof().\\n\\n   fail(), clear(n) and exceptions() are just never called. Delete\\n   them.\\n\")), mdx(\"h2\", null, \"[\\uD301]\", \" \\uCEE4\\uBC0B \\uBA54\\uC138\\uC9C0\\uB85C Github \\uC774\\uC288(issue)\\uB97C \\uC790\\uB3D9 \\uC885\\uB8CC\\uC2DC\\uD0A4\\uAE30\"), mdx(\"p\", null, \"\\uC544\\uB798 \\uBB38\\uBC95\\uC73C\\uB85C \\uCEE4\\uBC0B \\uBA54\\uC138\\uC9C0\\uB97C \\uB0A8\\uAE30\\uBA74 default branch(master)\\uC5D0 \\uD478\\uC2DC \\uB420 \\uB54C \\uC774\\uC288 \\uB2EB\\uD798.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\uD0A4\\uC6CC\\uB4DC #\\uC774\\uC288\\uBC88\\uD638\\n\")), mdx(\"h3\", null, \"Github \\uC774\\uC288 \\uC885\\uB8CC \\uD0A4\\uC6CC\\uB4DC\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"close\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"closes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"closed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fix\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fixes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fixed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"resolve\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"resolves\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"resolved\")), mdx(\"h3\", null, \"\\uAD00\\uB840\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"close\\uACC4\\uC5F4 : \\uC77C\\uBC18 \\uAC1C\\uBC1C \\uC774\\uC288\\nfix\\uACC4\\uC5F4 : \\uBC84\\uADF8 \\uD53D\\uC2A4, \\uD56B \\uD53D\\uC2A4 \\uC774\\uC288\\nresolve : \\uBB38\\uC758, \\uC694\\uCCAD \\uC0AC\\uD56D\\uC5D0 \\uB300\\uC751\\uD55C \\uC774\\uC288\")), mdx(\"h3\", null, \"\\uC608\\uBB38\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# \\uC81C\\uBAA9\\uC5D0 \\uC774\\uC288 \\uD55C \\uAC1C \\uB2EB\\uAE30\\uB97C \\uC801\\uC6A9\\uD55C \\uC0AC\\uB840\\nClose #31 - refactoring wrap-up\\n\\n* This is wrap-up of refactoring main code.\\n* main.c\\n  * removed old comments\\n  * fixed rest indentations\\n  * method extraction at line no. 35\\n\\n\\n# \\uBCF8\\uBB38\\uC5D0 \\uC774\\uC288 \\uC5EC\\uB7EC \\uAC1C \\uB2EB\\uAE30\\uB97C \\uC801\\uC6A9\\uD55C \\uC0AC\\uB840\\nUpdate policy 16/04/02\\n\\n* This closes #128 - cab policy, closes #129 - new hostname, and fixes #78 - bug on logging.\\n* cablist.txt: changed ACL due to policy update delivered via email on 16/04/02, @mr.parkyou\\n* hostname.properties: cab hostname is updated\\n* BeautifulDeveloper.java: logging problem on line no. 78 is fixed. The `if` statement is never happening. This deletes the `if` block.\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Table of Contents\n{:toc} 아래 참고사이트를 요약하였음. 한글  좋은 git 커밋 메시지를 작성하기 위한 7가지 약속  - 네이버 토스트 밋업 영문  How to Write a Git Commit Message…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/git/git-commit-convention","formatString":"YYYY.MM.DD"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}